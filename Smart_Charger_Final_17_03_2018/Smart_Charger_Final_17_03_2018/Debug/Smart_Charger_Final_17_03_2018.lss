
Smart_Charger_Final_17_03_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000362  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078b  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d7  00000000  00000000  00000ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000456  00000000  00000000  0000117a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cc  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000206  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001c4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	c0 c0       	rjmp	.+384    	; 0x184 <__vector_1>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <__bad_interrupt>
  20:	0e c0       	rjmp	.+28     	; 0x3e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a4 36       	cpi	r26, 0x64	; 100
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	c1 d0       	rcall	.+386    	; 0x1be <main>
  3c:	56 c1       	rjmp	.+684    	; 0x2ea <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <EEPROM_write>:
#include<avr/interrupt.h>
#include<util/delay.h>
#include<stdio.h>
volatile unsigned int Hours,Count;											//INITAITING HOUR & TIMER_COUNT VALUE
void EEPROM_write(unsigned int ucAddress, unsigned int cnt_Data, unsigned int hr_data)
{
  40:	cf 93       	push	r28
  42:	df 93       	push	r29
  44:	cd b7       	in	r28, 0x3d	; 61
  46:	dd 27       	eor	r29, r29
  48:	c3 50       	subi	r28, 0x03	; 3
  4a:	cd bf       	out	0x3d, r28	; 61
	unsigned char EEPR_data[3];
	int i;
	EEPR_data[0]=hr_data;													//CONVERTING INTEGER FORMAT TO BYTE FORMAT
  4c:	49 83       	std	Y+1, r20	; 0x01
	EEPR_data[1]=cnt_Data>>8;												//CONVERTING INTEGER FORMAT TO BYTE FORMAT
  4e:	7a 83       	std	Y+2, r23	; 0x02
	EEPR_data[2]=cnt_Data;													//CONVERTING INTEGER FORMAT TO BYTE FORMAT
  50:	6b 83       	std	Y+3, r22	; 0x03
  52:	fe 01       	movw	r30, r28
  54:	31 96       	adiw	r30, 0x01	; 1
  56:	ac 01       	movw	r20, r24
  58:	4d 5f       	subi	r20, 0xFD	; 253
  5a:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<=2;i++,ucAddress++)
	{
		while(EECR & (1<<EEPE));												/* Wait for completion of previous write */
  5c:	e1 99       	sbic	0x1c, 1	; 28
  5e:	fe cf       	rjmp	.-4      	; 0x5c <EEPROM_write+0x1c>
		EECR = (0<<EEPM1)|(0<<EEPM0);											/* Set Programming mode */
  60:	1c ba       	out	0x1c, r1	; 28
		EEAR = ucAddress;														/* Set up address and data registers */
  62:	9f bb       	out	0x1f, r25	; 31
  64:	8e bb       	out	0x1e, r24	; 30
		EEDR = EEPR_data[i];
  66:	21 91       	ld	r18, Z+
  68:	2d bb       	out	0x1d, r18	; 29
		EECR |= (1<<EEMPE);														/* Write logical one to EEMPE */
  6a:	e2 9a       	sbi	0x1c, 2	; 28
		EECR |= (1<<EEPE);														/* Start eeprom write by setting EEPE */
  6c:	e1 9a       	sbi	0x1c, 1	; 28
	unsigned char EEPR_data[3];
	int i;
	EEPR_data[0]=hr_data;													//CONVERTING INTEGER FORMAT TO BYTE FORMAT
	EEPR_data[1]=cnt_Data>>8;												//CONVERTING INTEGER FORMAT TO BYTE FORMAT
	EEPR_data[2]=cnt_Data;													//CONVERTING INTEGER FORMAT TO BYTE FORMAT
	for(i=0;i<=2;i++,ucAddress++)
  6e:	01 96       	adiw	r24, 0x01	; 1
  70:	84 17       	cp	r24, r20
  72:	95 07       	cpc	r25, r21
  74:	99 f7       	brne	.-26     	; 0x5c <EEPROM_write+0x1c>
		EEAR = ucAddress;														/* Set up address and data registers */
		EEDR = EEPR_data[i];
		EECR |= (1<<EEMPE);														/* Write logical one to EEMPE */
		EECR |= (1<<EEPE);														/* Start eeprom write by setting EEPE */
	}
}
  76:	cd 5f       	subi	r28, 0xFD	; 253
  78:	cd bf       	out	0x3d, r28	; 61
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	08 95       	ret

00000080 <EEPROM_read>:

unsigned char EEPROM_read(unsigned int ucAddress)
{
	while(EECR & (1<<EEPE));												/* Wait for completion of previous write */
  80:	e1 99       	sbic	0x1c, 1	; 28
  82:	fe cf       	rjmp	.-4      	; 0x80 <EEPROM_read>
	EEAR = ucAddress;														/* Set up address register */
  84:	9f bb       	out	0x1f, r25	; 31
  86:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);														/* Start eeprom read by writing EERE */
  88:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;															/* Return data from data register */
  8a:	8d b3       	in	r24, 0x1d	; 29
}
  8c:	08 95       	ret

0000008e <Call_Timer>:

void Call_Timer()
{
  8e:	1f 93       	push	r17
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
	int Previous_hour=Hours,EE_wr_time=/*57*/3446;							//NUMBER OF COUNTS (57) FOR 15 SEC & (3446) FOR 15 MIN
  94:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <_edata>
  98:	d0 91 61 00 	lds	r29, 0x0061	; 0x800061 <_edata+0x1>
	TCCR0B =(1 << CS02)|(1 << CS00);										//PRESCALLING TIMER0 - 1024
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	83 bf       	out	0x33, r24	; 51
	EEPROM_write(0x08,Count,Hours);											//WRITING TO EEPROM INITIALLY FOR SAFETY
  a0:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <_edata>
  a4:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <_edata+0x1>
  a8:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <Count>
  ac:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <Count+0x1>
  b0:	88 e0       	ldi	r24, 0x08	; 8
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	c5 df       	rcall	.-118    	; 0x40 <EEPROM_write>
	while(1)
	{
		while((TIFR0 & 0x01)==0);											//WAIT UNTILL OVERFLOW (TOV0 GOES TO ZERO)
		TIFR0=0x01;															//SETTING TOV0
  b6:	11 e0       	ldi	r17, 0x01	; 1
	int Previous_hour=Hours,EE_wr_time=/*57*/3446;							//NUMBER OF COUNTS (57) FOR 15 SEC & (3446) FOR 15 MIN
	TCCR0B =(1 << CS02)|(1 << CS00);										//PRESCALLING TIMER0 - 1024
	EEPROM_write(0x08,Count,Hours);											//WRITING TO EEPROM INITIALLY FOR SAFETY
	while(1)
	{
		while((TIFR0 & 0x01)==0);											//WAIT UNTILL OVERFLOW (TOV0 GOES TO ZERO)
  b8:	08 b6       	in	r0, 0x38	; 56
  ba:	00 fe       	sbrs	r0, 0
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <Call_Timer+0x2a>
		TIFR0=0x01;															//SETTING TOV0
  be:	18 bf       	out	0x38, r17	; 56
		Count++;															//INCREMENTING THE COUNT FOR 1 HOUR
  c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Count>
  c4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Count+0x1>
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <Count+0x1>
  ce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Count>
		if((Count==EE_wr_time)||(Count==(2*EE_wr_time))||(Count==(3*EE_wr_time)))	//FOR TESTING EVERY 15 MIN
  d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Count>
  d6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Count+0x1>
  da:	86 37       	cpi	r24, 0x76	; 118
  dc:	9d 40       	sbci	r25, 0x0D	; 13
  de:	71 f0       	breq	.+28     	; 0xfc <__stack+0x1d>
  e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Count>
  e4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Count+0x1>
  e8:	8c 3e       	cpi	r24, 0xEC	; 236
  ea:	9a 41       	sbci	r25, 0x1A	; 26
  ec:	39 f0       	breq	.+14     	; 0xfc <__stack+0x1d>
  ee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Count>
  f2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Count+0x1>
  f6:	82 36       	cpi	r24, 0x62	; 98
  f8:	98 42       	sbci	r25, 0x28	; 40
  fa:	59 f4       	brne	.+22     	; 0x112 <__stack+0x33>
		{
			EEPROM_write(0x08,Count,Hours);									//WRITING TO EEPROM FOR EVERY 15 MIN
  fc:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <_edata>
 100:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <_edata+0x1>
 104:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <Count>
 108:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <Count+0x1>
 10c:	88 e0       	ldi	r24, 0x08	; 8
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	97 df       	rcall	.-210    	; 0x40 <EEPROM_write>
		}
		if(Count>=/*229*/13786)												//FOR TESTING NUMBER OF COUNTS (229) FOR 1	MIN & (13786) FOR 1 HOUR
 112:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Count>
 116:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Count+0x1>
 11a:	8a 3d       	cpi	r24, 0xDA	; 218
 11c:	95 43       	sbci	r25, 0x35	; 53
 11e:	10 f1       	brcs	.+68     	; 0x164 <__stack+0x85>
		{
			Count=0;														//RESETTING COUNT
 120:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Count+0x1>
 124:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Count>
			Hours--;														//DECREASIG HOUR
 128:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 12c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 136:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			if(Hours==0)
 13a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 13e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 142:	89 2b       	or	r24, r25
 144:	d9 f4       	brne	.+54     	; 0x17c <__stack+0x9d>
			{
				EEPROM_write(0x08,Count,Hours);								//WRITTING AS ZERO, BOTH HOURS & COUNT.
 146:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <_edata>
 14a:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <_edata+0x1>
 14e:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <Count>
 152:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <Count+0x1>
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	72 df       	rcall	.-284    	; 0x40 <EEPROM_write>
				PORTA|=0xaf;												//ALL LED'S AND P-MOS(CHARGING PIN) PIN ARE OFF CONDITION
 15c:	8b b3       	in	r24, 0x1b	; 27
 15e:	8f 6a       	ori	r24, 0xAF	; 175
 160:	8b bb       	out	0x1b, r24	; 27
				break;														//ROUTING TO MAIN()
 162:	0c c0       	rjmp	.+24     	; 0x17c <__stack+0x9d>
			}
			break;															//ROUTING TO MAIN()
		}
		if(Hours>Previous_hour)												//BY THIS CONDITION WE ARE ROUTING TO MAIN()
 164:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 168:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 16c:	c8 17       	cp	r28, r24
 16e:	d9 07       	cpc	r29, r25
 170:	08 f0       	brcs	.+2      	; 0x174 <__stack+0x95>
 172:	a2 cf       	rjmp	.-188    	; 0xb8 <Call_Timer+0x2a>
		{
			Count=0;
 174:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Count+0x1>
 178:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Count>
			break;															//ROUTING TO MAIN()
		}
	}
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	08 95       	ret

00000184 <__vector_1>:
ISR(EXT_INT0_vect)															// INTERRUPT SERVICE ROUTINE FOR INT0
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
	Hours++;																//NUMBER OF HOURS
 192:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 196:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 1a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <INTO_init>:
void INTO_init()
{
	MCUCR=(1<<ISC01)|(1<<ISC00);											//FOR RAISING EDGE TRIGGERING
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	85 bf       	out	0x35, r24	; 53
	GIMSK|=(1<<INT0);														//FOR ENABLING INTERRUPT 0
 1b6:	8b b7       	in	r24, 0x3b	; 59
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	8b bf       	out	0x3b, r24	; 59
 1bc:	08 95       	ret

000001be <main>:
}
int main(void)
{
	sei();																	//SET ALL INTERRUPTS ENABLE
 1be:	78 94       	sei
	DDRA |=0xef;															//PA0 &PA1 &PA2 &PA3 &PA5 &PA7 AS OUTPUT
 1c0:	8a b3       	in	r24, 0x1a	; 26
 1c2:	8f 6e       	ori	r24, 0xEF	; 239
 1c4:	8a bb       	out	0x1a, r24	; 26
	PORTA |=0xaf;															//INITIALLY PMOS OFF (CHARGING OFF)
 1c6:	8b b3       	in	r24, 0x1b	; 27
 1c8:	8f 6a       	ori	r24, 0xAF	; 175
 1ca:	8b bb       	out	0x1b, r24	; 27
	INTO_init();															//INTERRUPT-0 INITIALIZATION
 1cc:	f2 df       	rcall	.-28     	; 0x1b2 <INTO_init>
	PORTA &=0x20;															//ALL LED'S ON
 1ce:	8b b3       	in	r24, 0x1b	; 27
 1d0:	80 72       	andi	r24, 0x20	; 32
 1d2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	2f e9       	ldi	r18, 0x9F	; 159
 1d6:	86 e8       	ldi	r24, 0x86	; 134
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x1c>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x26>
 1e4:	00 00       	nop
	_delay_ms(500);															//DELAY OF HALF SEC
	PORTA |=0xbf;															//ALL LED'S OFF
 1e6:	8b b3       	in	r24, 0x1b	; 27
 1e8:	8f 6b       	ori	r24, 0xBF	; 191
 1ea:	8b bb       	out	0x1b, r24	; 27
 1ec:	2f e9       	ldi	r18, 0x9F	; 159
 1ee:	86 e8       	ldi	r24, 0x86	; 134
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x34>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x3e>
 1fc:	00 00       	nop
	_delay_ms(500);															//DELAY OF HALF SEC
	Hours=(int)EEPROM_read(0x08);											//CONVERTING CHAR TO INT
 1fe:	88 e0       	ldi	r24, 0x08	; 8
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	3e df       	rcall	.-388    	; 0x80 <EEPROM_read>
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 20a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	Count=(((int)EEPROM_read(0x09))<<8)|((int)EEPROM_read(0x0A));			//CONVERTING CHAR TO INT
 20e:	89 e0       	ldi	r24, 0x09	; 9
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	36 df       	rcall	.-404    	; 0x80 <EEPROM_read>
 214:	c8 2f       	mov	r28, r24
 216:	8a e0       	ldi	r24, 0x0A	; 10
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	32 df       	rcall	.-412    	; 0x80 <EEPROM_read>
 21c:	2c 2f       	mov	r18, r28
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	32 2f       	mov	r19, r18
 222:	22 27       	eor	r18, r18
 224:	28 2b       	or	r18, r24
 226:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <Count+0x1>
 22a:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <Count>
	while (1)
	{
		if(Hours>=6)
 22e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 232:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 236:	06 97       	sbiw	r24, 0x06	; 6
 238:	90 f0       	brcs	.+36     	; 0x25e <main+0xa0>
		{
			Hours=0;														//LIMMITTING TO 6 CLICKS
 23a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 23e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			EEPROM_write(0x08,Count,Hours);									//WRITTING AS ZERO, BOTH HOURS & COUNT.
 242:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <_edata>
 246:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <_edata+0x1>
 24a:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <Count>
 24e:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <Count+0x1>
 252:	88 e0       	ldi	r24, 0x08	; 8
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	f4 de       	rcall	.-536    	; 0x40 <EEPROM_write>
			PORTA|=0xaf;													//ALL LED'S AND P-MOS(CHARGING PIN) PIN ARE OFF CONDITION
 258:	8b b3       	in	r24, 0x1b	; 27
 25a:	8f 6a       	ori	r24, 0xAF	; 175
 25c:	8b bb       	out	0x1b, r24	; 27
		}
		if(Count>13786)														//FOR SAFETY WHEN EEPROM FAIL CONDITION(NO NEED THIS IF CODITION)
 25e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Count>
 262:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Count+0x1>
 266:	8b 3d       	cpi	r24, 0xDB	; 219
 268:	95 43       	sbci	r25, 0x35	; 53
 26a:	20 f0       	brcs	.+8      	; 0x274 <main+0xb6>
		{
			Count=0;
 26c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Count+0x1>
 270:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Count>
		}
		switch(Hours)
 274:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 278:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	91 05       	cpc	r25, r1
 280:	e9 f0       	breq	.+58     	; 0x2bc <main+0xfe>
 282:	30 f4       	brcc	.+12     	; 0x290 <main+0xd2>
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	91 05       	cpc	r25, r1
 288:	49 f0       	breq	.+18     	; 0x29c <main+0xde>
 28a:	02 97       	sbiw	r24, 0x02	; 2
 28c:	79 f0       	breq	.+30     	; 0x2ac <main+0xee>
 28e:	cf cf       	rjmp	.-98     	; 0x22e <main+0x70>
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	91 05       	cpc	r25, r1
 294:	d9 f0       	breq	.+54     	; 0x2cc <main+0x10e>
 296:	05 97       	sbiw	r24, 0x05	; 5
 298:	09 f1       	breq	.+66     	; 0x2dc <main+0x11e>
 29a:	c9 cf       	rjmp	.-110    	; 0x22e <main+0x70>
		{
			case 1:
				PORTA|=0x8f;											//CLEARING LED'S
 29c:	8b b3       	in	r24, 0x1b	; 27
 29e:	8f 68       	ori	r24, 0x8F	; 143
 2a0:	8b bb       	out	0x1b, r24	; 27
				PORTA&=0x8e;											//CHARGING ON WITH ONE LED BLINKING
 2a2:	8b b3       	in	r24, 0x1b	; 27
 2a4:	8e 78       	andi	r24, 0x8E	; 142
 2a6:	8b bb       	out	0x1b, r24	; 27
				Call_Timer();											//CALLING 1 HOUR
 2a8:	f2 de       	rcall	.-540    	; 0x8e <Call_Timer>
				break;
 2aa:	c1 cf       	rjmp	.-126    	; 0x22e <main+0x70>
			case 2:
				PORTA|=0x8f;											//CLEARING LED'S
 2ac:	8b b3       	in	r24, 0x1b	; 27
 2ae:	8f 68       	ori	r24, 0x8F	; 143
 2b0:	8b bb       	out	0x1b, r24	; 27
				PORTA&=0x8c;											//CHARGING ON WITH TWO LED'S BLINKING
 2b2:	8b b3       	in	r24, 0x1b	; 27
 2b4:	8c 78       	andi	r24, 0x8C	; 140
 2b6:	8b bb       	out	0x1b, r24	; 27
				Call_Timer();											//CALLING 1 HOUR
 2b8:	ea de       	rcall	.-556    	; 0x8e <Call_Timer>
				break;
 2ba:	b9 cf       	rjmp	.-142    	; 0x22e <main+0x70>
			case 3:
				PORTA|=0x8f;											//CLEARING LED'S
 2bc:	8b b3       	in	r24, 0x1b	; 27
 2be:	8f 68       	ori	r24, 0x8F	; 143
 2c0:	8b bb       	out	0x1b, r24	; 27
				PORTA&=0x88;											//CHARGING ON WITH THREE LED BLINKING
 2c2:	8b b3       	in	r24, 0x1b	; 27
 2c4:	88 78       	andi	r24, 0x88	; 136
 2c6:	8b bb       	out	0x1b, r24	; 27
				Call_Timer();											//CALLING 1 HOUR
 2c8:	e2 de       	rcall	.-572    	; 0x8e <Call_Timer>
				break;
 2ca:	b1 cf       	rjmp	.-158    	; 0x22e <main+0x70>
			case 4:
				PORTA|=0x8f;											//CLEARING LED'S
 2cc:	8b b3       	in	r24, 0x1b	; 27
 2ce:	8f 68       	ori	r24, 0x8F	; 143
 2d0:	8b bb       	out	0x1b, r24	; 27
				PORTA&=0x80;											//CHARGING ON WITH FOUR LED'S BLINKING
 2d2:	8b b3       	in	r24, 0x1b	; 27
 2d4:	80 78       	andi	r24, 0x80	; 128
 2d6:	8b bb       	out	0x1b, r24	; 27
				Call_Timer();											//CALLING 1 HOUR
 2d8:	da de       	rcall	.-588    	; 0x8e <Call_Timer>
				break;
 2da:	a9 cf       	rjmp	.-174    	; 0x22e <main+0x70>
			case 5:
				PORTA|=0x8f;											//CLEARING LED'S
 2dc:	8b b3       	in	r24, 0x1b	; 27
 2de:	8f 68       	ori	r24, 0x8F	; 143
 2e0:	8b bb       	out	0x1b, r24	; 27
				PORTA&=0x00;											//CHARGING ON WITH FIVE LED'S BLINKING
 2e2:	8b b3       	in	r24, 0x1b	; 27
 2e4:	1b ba       	out	0x1b, r1	; 27
				Call_Timer();											//CALLING 1 HOUR
 2e6:	d3 de       	rcall	.-602    	; 0x8e <Call_Timer>
				break;
 2e8:	a2 cf       	rjmp	.-188    	; 0x22e <main+0x70>

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
